import { ListView, Slider } from "std-widgets.slint";
import { NextSongButton, PrevSongButton, PlayPauseButton, InOrderButton, RandomButton } from "button.slint";
import { SongInfo, TitleBar, SongItem } from "song.slint";


// play mode: in order / random
export enum PlayMode {
    InOrder,
    Random,
}

// ui state
export struct UIState {
    // 当前播放进度 (秒)
    progress: float,
    // 总时长 (秒)
    duration: float,
    // 当前播放进度文本
    progress_info_str: string,
    // 播放/暂停状态
    paused: bool,
    // 是否正在拖动进度条
    dragging: bool,
    // 歌曲列表
    song_list: [SongInfo],
    // 当前播放歌曲的信息
    current_song: SongInfo,
    // 播放模式
    play_mode: PlayMode,
    // 是否已被用户触发播放
    user_listening: bool,
}

export component MainWindow inherits Window {
    width: 750px;
    height: 500px;
    title: "Slint Rodio Player";
    in-out property <UIState> ui_state;
    callback toggle_play();
    callback play(SongInfo);
    callback play_next();
    callback play_prev();
    callback change_progress(float);
    callback switch_mode(PlayMode);
    VerticalLayout {
        TitleBar { }

        ListView {
            height: 80%;
            width: 100%;
            for item in ui_state.song_list: SongItem {
                info: item;
                double_clicked => {
                    play(item);
                }
            }
        }

        progress-bar := Slider {
            minimum: 0;
            maximum: ui_state.duration;
            // 单向绑定被用户强制改变状态后，绑定失效，不再自动更新
            value: ui_state.progress;
            released(v) => {
                ui_state.dragging = false;
                change_progress(v);
            }
            changed(_) => {
                ui_state.dragging = true;
            }
        }

        HorizontalLayout {
            alignment: center;
            Rectangle {
                width: 30%;
                Text {
                    x: parent.width / 2 - self.width / 2;
                    y: parent.height / 2 - self.height / 2;
                    text: ui_state.current_song.song_name + " - " + ui_state.current_song.singer;
                    vertical-alignment: center;
                    horizontal-alignment: center;
                    wrap: TextWrap.word-wrap;
                }
            }

            Rectangle {
                width: 6%;
                InOrderButton {
                    x: parent.width / 2 - self.width / 2;
                    y: parent.height / 2 - self.height / 2;
                    selected: ui_state.play_mode == PlayMode.InOrder;
                    w: 20;
                    h: 20;
                    clicked => {
                        switch_mode(PlayMode.InOrder);
                    }
                }
            }

            Rectangle {
                width: 6%;
                PrevSongButton {
                    x: parent.width / 2 - self.width / 2;
                    y: parent.height / 2 - self.height / 2;
                    w: 20;
                    h: 20;
                    clicked => {
                        root.play_prev();
                    }
                }
            }

            Rectangle {
                width: 6%;
                play-btn := PlayPauseButton {
                    x: parent.width / 2 - self.width / 2;
                    y: parent.height / 2 - self.height / 2;
                    w: 20;
                    h: 20;
                    // 单向绑定被用户强制改变状态后，绑定失效，不再自动更新
                    paused: ui_state.paused;
                    toggled => {
                        root.toggle_play();
                    }
                }
            }

            Rectangle {
                width: 6%;
                NextSongButton {
                    x: parent.width / 2 - self.width / 2;
                    y: parent.height / 2 - self.height / 2;
                    w: 20;
                    h: 20;
                    clicked => {
                        root.play_next();
                    }
                }
            }

            Rectangle {
                width: 6%;
                border-color: transparent;
                RandomButton {
                    x: parent.width / 2 - self.width / 2;
                    y: parent.height / 2 - self.height / 2;
                    selected: ui_state.play_mode == PlayMode.Random;
                    w: 20;
                    h: 20;
                    clicked => {
                        switch_mode(PlayMode.Random);
                    }
                }
            }

            Rectangle {
                width: 30%;
                Text {
                    x: parent.width / 2 - self.width / 2;
                    text: ui_state.progress_info_str;
                    vertical-alignment: center;
                    horizontal-alignment: center;
                }
            }
        }
    }

    // 临时通过定时器刷新`失效`的单向绑定状态
    Timer {
        interval: 100ms;
        running: true;
        triggered => {
            if !ui_state.dragging {
                progress-bar.value = ui_state.progress;
            }
            play-btn.paused = ui_state.paused;
        }
    }
}
