import { ListView, Slider, TabWidget, StandardListView, LineEdit } from "std-widgets.slint";
import { NextSongButton, PrevSongButton, PlayPauseButton, OverlapButton, RandomButton, PlayMode } from "button.slint";
import { SongInfo, TitleBar, SongItem } from "song.slint";
import { LyricLine } from "lyric.slint";


// lyric item
export struct LyricItem {
    time: float,
    duration: float,
    text: string,
} 

// trigger source
export enum TriggerSource {
    ClickItem,
    Prev,
    Next,
}

// ui state
export global UIState {
    // 当前播放进度 (秒)
    in-out property <float> progress;
    // 总时长 (秒)
    in-out property <float> duration;
    // 当前播放进度文本
    in-out property <string> progress_info_str;
    // 播放/暂停状态
    in-out property <bool> paused;
    // 是否正在拖动进度条
    in-out property <bool> dragging;
    // 歌曲列表
    in-out property <[SongInfo]> song_list;
    // 当前播放歌曲的信息
    in-out property <SongInfo> current_song;
    // 播放模式
    in-out property <PlayMode> play_mode;
    // 是否已被用户触发播放
    in-out property <bool> user_listening;
    // 当前播放歌曲的歌词
    in-out property <[LyricItem]> lyrics;
    // 当前歌词视窗的滚动条位置（一般为负数）
    in property <length> lyric_viewport_y;
    // 当前一行歌词的高度
    in-out property <length> lyric_line_height: 30px;
    // 歌曲文件夹配置
    in-out property <string> song_dir;
    // 关于信息
    in property <string> about_info;
    // 专辑封面图像
    in property <image> album_image;
    // 播放历史
    in property <[SongInfo]> play_history;
    // 播放历史索引
    in property <int> history_index: 0;
}

export component MainWindow inherits Window {
    preferred-width: 750px;
    preferred-height: 500px;
    min-height: 500px;
    min-width: 750px;
    title: "Vanilla Player";
    icon: @image-url("cover.svg");
    forward-focus: key-input-handler;
    callback toggle_play();
    callback play(SongInfo, TriggerSource);
    callback play_next();
    callback play_prev();
    callback change_progress(float);
    callback switch_mode(PlayMode);
    callback refresh_song_list(string);
    tabs := TabWidget {
        Tab {
            title: "歌曲列表";
            VerticalLayout {
                TitleBar { }

                ListView {
                    height: 80%;
                    width: 100%;
                    for item in UIState.song_list: SongItem {
                        info: item;
                        double_clicked => {
                            play(item, TriggerSource.ClickItem);
                        }
                    }
                }

                Slider {
                    minimum: 0;
                    maximum: UIState.duration;
                    // 单向绑定被用户强制改变状态后，绑定失效，不再自动更新, 所以双向绑定
                    value <=> UIState.progress;
                    released(v) => {
                        UIState.dragging = false;
                        change_progress(v);
                    }
                    changed(_) => {
                        UIState.dragging = true;
                    }
                }

                HorizontalLayout {
                    height: 10%;
                    alignment: center;
                    TouchArea {
                        width: 35%;
                        height: 100%;
                        double-clicked => {
                            tabs.current-index = 1; // 切换到歌词页
                        }
                        HorizontalLayout {
                            alignment: start;
                            spacing: 3px;
                            Image {
                                y: parent.height / 2 - self.height / 2;
                                width: 40px;
                                height: 40px;
                                source: UIState.album_image;
                                image-fit: contain;
                            }

                            Rectangle {
                                width: 80%;
                                height: 100%;
                                Text {
                                    width: 100%;
                                    x: parent.width / 2 - self.width / 2;
                                    text: UIState.current_song.song_name + " - " + UIState.current_song.singer;
                                    vertical-alignment: center;
                                    horizontal-alignment: center;
                                    wrap: TextWrap.word-wrap;
                                }
                            }
                        }
                    }

                    Rectangle {
                        width: 6%;
                        OverlapButton {
                            x: parent.width / 2 - self.width / 2;
                            y: parent.height / 2 - self.height / 2;
                            w: 20;
                            h: 20;
                            mode <=> UIState.play_mode;
                            clicked => {
                                if (UIState.play_mode == PlayMode.InOrder) {
                                    switch_mode(PlayMode.Recursive);
                                } else {
                                    switch_mode(PlayMode.InOrder);
                                }
                            }
                        }
                    }

                    Rectangle {
                        width: 6%;
                        PrevSongButton {
                            x: parent.width / 2 - self.width / 2;
                            y: parent.height / 2 - self.height / 2;
                            w: 20;
                            h: 20;
                            clicked => {
                                root.play_prev();
                            }
                        }
                    }

                    Rectangle {
                        width: 6%;
                        PlayPauseButton {
                            x: parent.width / 2 - self.width / 2;
                            y: parent.height / 2 - self.height / 2;
                            w: 20;
                            h: 20;
                            // 单向绑定被用户强制改变状态后，绑定失效，不再自动更新, 所以双向绑定
                            paused <=> UIState.paused;
                            toggled => {
                                root.toggle_play();
                            }
                        }
                    }

                    Rectangle {
                        width: 6%;
                        NextSongButton {
                            x: parent.width / 2 - self.width / 2;
                            y: parent.height / 2 - self.height / 2;
                            w: 20;
                            h: 20;
                            clicked => {
                                root.play_next();
                            }
                        }
                    }

                    Rectangle {
                        width: 6%;
                        border-color: transparent;
                        RandomButton {
                            x: parent.width / 2 - self.width / 2;
                            y: parent.height / 2 - self.height / 2;
                            selected: UIState.play_mode == PlayMode.Random;
                            w: 20;
                            h: 20;
                            clicked => {
                                switch_mode(PlayMode.Random);
                            }
                        }
                    }

                    Rectangle {
                        width: 35%;
                        TouchArea {
                            double-clicked => {
                                tabs.current-index = 1; // 切换到歌词页
                            }
                        }

                        Text {
                            x: parent.width / 2 - self.width / 2;
                            text: UIState.progress_info_str;
                            vertical-alignment: center;
                            horizontal-alignment: center;
                        }
                    }
                }

                Rectangle {
                    width: 100%;
                    height: 5px;
                    background: transparent;
                }
            }
        }

        Tab {
            title: "歌词";
            Rectangle {
                TouchArea {
                    double-clicked => {
                        tabs.current-index = 0; // 切换到歌曲列表页
                    }
                }

                width: 100%;
                height: 100%;
                background: transparent;
                Image {
                    source: UIState.album_image;
                    image-fit: fill;
                }

                opacity: 0.2;
                z: -10;
            }

            VerticalLayout {
                alignment: center;
                lyric-win := ListView {
                    height: 100%;
                    width: 100%;
                    mouse-drag-pan-enabled: false;
                    viewport-y <=> UIState.lyric_viewport_y;
                    for item in UIState.lyrics: LyricLine {
                        content: item.text;
                        playing: (UIState.progress >= item.time) && (UIState.progress < item.time + item.duration);
                    }
                }
            }
        }

        Tab {
            title: "设置";
            VerticalLayout {
                width: 100%;
                height: 100%;
                alignment: center;
                HorizontalLayout {
                    alignment: center;
                    spacing: 10px;
                    Rectangle {
                        width: 20%;
                        Text {
                            text: "歌曲文件夹路径:";
                        }
                    }

                    LineEdit {
                        text <=> UIState.song_dir;
                        width: 50%;
                        height: 30px;
                        accepted(p) => {
                            refresh_song_list(p);
                        }
                    }
                }
            }
        }

        Tab {
            title: "关于";
            Text {
                width: 100%;
                height: 100%;
                font-size: 16px;
                text: UIState.about_info;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
    }

    key-input-handler := FocusScope {
        key-released(event) => {
            if event.text == Key.Space {
                root.toggle_play();
            } else if event.text == Key.RightArrow || event.text == Key.DownArrow {
                root.play_next();
            } else if event.text == Key.LeftArrow || event.text == Key.UpArrow {
                root.play_prev();
            } else if event.text == Key.F1 {
                tabs.current-index = 0;
            } else if event.text == Key.F2 {
                tabs.current-index = 1;
            } else if event.text == Key.F3 {
                tabs.current-index = 2;
            } else if event.text == Key.F4 {
                tabs.current-index = 3;
            }
            return accept;
        }
    }
}
